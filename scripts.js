/***************************************************  
 * scripts.js
 * 
 * 1. Hero轮播：全屏 100vh (PC端)，自动切换
 * 2. EmailJS表单提交
 * 3. 预留更多JS功能(对比按钮、3D旋转、在线聊天)
 * 4. 汉堡菜单逻辑：支持全屏子窗口显示和关闭
 * 5. 模态窗口逻辑：点击后可打开/关闭子级界面
 * 6. (优化) 无限滚动逻辑 + Apple 风格暂停按钮 (使用 CSS 伪元素显示符号)
 * 7. (新增) 图片点击跳转至产品详情页面
 * 8. (新增) 翻转卡片功能：正面与反面切换
 * 9. (优化) 帧动画：滚动触发 + 平滑渐变 + 播放/暂停按钮
 * 10. (新增) 轮播轨道功能：左右按钮和小点控制
 * 11. 
 ***************************************************/
 
/* 1) 轮播功能 */
const initHeroCarousel = () => { const heroSlides = document.getElementById('hero-slides'); const dots = document.querySelectorAll('.hero-dots .dot'); if (!heroSlides || dots.length === 0) return; let currentIndex = 0; const totalSlides = heroSlides.children.length; const updateSlide = () => { currentIndex = (currentIndex + 1) % totalSlides; heroSlides.style.transform = `translateX(-${currentIndex * 100}%)`; dots.forEach((dot, index) => { dot.classList.toggle('active', index === currentIndex); }); }; dots.forEach((dot, index) => { dot.addEventListener('click', () => { currentIndex = index; heroSlides.style.transform = `translateX(-${currentIndex * 100}%)`; dots.forEach((d, i) => { d.classList.toggle('active', i === currentIndex); }); }); }); setInterval(updateSlide, 5000); };

/* 2) EmailJS 表单提交 */
const initEmailJS = () => { if (typeof emailjs === 'undefined') return; emailjs.init("HXCThZROMytOt-wyp"); const contactForm = document.getElementById("contactForm"); if (contactForm) { contactForm.addEventListener("submit", (e) => { e.preventDefault(); emailjs.sendForm("service_1ffkva1", "template_ypdj9n9", contactForm).then(() => { alert("邮件已发送成功，我们将尽快与您联系！"); contactForm.reset(); }).catch((err) => { console.error("邮件发送失败：", err); alert("邮件发送失败，请稍后再试。"); }); }); } };

/* 3) 预留对比按钮 */
const initCompareFeature = () => { const compareBtn = document.querySelector(".compare-features .btn"); if (compareBtn) { compareBtn.addEventListener("click", () => { alert("对比功能暂未实现 (预留)！"); }); } };

/* 4) 汉堡菜单 */
const initHamburgerMenu = () => { const menuIcon = document.getElementById('menuIcon'); const mobileNav = document.getElementById('mobileNav'); const closeBtn = document.getElementById('closeBtn'); if (!menuIcon || !mobileNav || !closeBtn) return; menuIcon.addEventListener('click', () => { mobileNav.classList.add('active'); }); closeBtn.addEventListener('click', () => { mobileNav.classList.remove('active'); }); const navLinks = mobileNav.querySelectorAll('ul li a'); navLinks.forEach((link) => { link.addEventListener('click', () => { mobileNav.classList.remove('active'); }); }); };

/* 5) 模态窗口 */
const initModalWindows = () => { document.querySelectorAll('[data-modal-target]').forEach(trigger => { trigger.addEventListener('click', () => { const modal = document.querySelector(trigger.getAttribute('data-modal-target')); if (modal) modal.classList.add('active'); }); }); document.querySelectorAll('[data-modal-close]').forEach(btn => { btn.addEventListener('click', () => { const parentModal = btn.closest('.modal'); if (parentModal) parentModal.classList.remove('active'); }); }); };

/* 6) 无限滚动 + Apple 风格暂停按钮 */
const initInfiniteScroller = () => { const scroller = document.getElementById('infiniteScroller'); const pauseBtn = document.querySelector('.pause-btn'); if (!scroller || !pauseBtn) return; const images = [ "A peaceful brookside setting.png", "A scenic riverside bend.png", "A serene coastal shore.png", "A shaded forest path.png" ]; let isPaused = false; let speed = 0.3; let lastTimestamp = 0; let itemsOnScreen = []; let track; track = document.createElement('div'); track.className = 'infinite-scroller-track'; track.style.display = 'flex'; track.style.position = 'relative'; track.style.transform = 'translateX(0)'; scroller.appendChild(track); for (let i = 0; i < 2; i++) { images.forEach(createItem); } function createItem(imageSrc) { const imgContainer = document.createElement('div'); imgContainer.className = 'infinite-scroller-item'; imgContainer.style.position = 'absolute'; imgContainer.style.width = '100%'; const img = document.createElement('img'); img.src = imageSrc; img.alt = imageSrc; img.style.width = '100%'; img.style.objectFit = 'cover'; imgContainer.appendChild(img); track.appendChild(imgContainer); const offsetX = (itemsOnScreen.length === 0) ? 0 : (itemsOnScreen[itemsOnScreen.length - 1].x + imgContainer.offsetWidth); imgContainer.style.left = `${offsetX}px`; const itemObj = { el: imgContainer, x: offsetX, width: imgContainer.offsetWidth }; itemsOnScreen.push(itemObj); } function animate(timestamp) { if (!isPaused) { const delta = timestamp - lastTimestamp; lastTimestamp = timestamp; const moveDist = speed * (delta / 16.67); for (let i = 0; i < itemsOnScreen.length; i++) { const item = itemsOnScreen[i]; item.x -= moveDist; item.el.style.left = `${item.x}px`; } const lastItem = itemsOnScreen[itemsOnScreen.length - 1]; if (lastItem.x + lastItem.width < window.innerWidth + 100) { createItem(images[itemsOnScreen.length % images.length]); } } requestAnimationFrame(animate); } pauseBtn.classList.remove('paused'); pauseBtn.addEventListener('click', () => { isPaused = !isPaused; pauseBtn.classList.toggle('paused'); }); requestAnimationFrame(animate); };

/* DOMContentLoaded 下的左侧空白闪现修复 */
document.addEventListener("DOMContentLoaded", function () { const scroller = document.getElementById("infiniteScroller"); const track = document.querySelector(".infinite-scroller-track"); if (scroller && track) { track.style.transform = "translateX(0)"; scroller.innerHTML += scroller.innerHTML; } const pauseBtn = document.getElementById("pauseBtn"); let isPaused = false; pauseBtn.addEventListener("click", function () { isPaused = !isPaused; scroller.style.animationPlayState = isPaused ? "paused" : "running"; pauseBtn.textContent = isPaused ? "▶" : "❚❚"; }); pauseBtn.textContent = "❚❚"; });
document.addEventListener("DOMContentLoaded", function () { const track = document.querySelector(".infinite-scroller-track"); if (track) { track.style.transform = "translateX(0)"; } });

/* 7) 图片点击跳转 */
const initProductImageClick = () => { document.querySelectorAll('.product-card img').forEach(image => { image.addEventListener('click', () => { const productPage = image.alt.toLowerCase().replace(/\s+/g, '-') + ".html"; window.location.href = productPage; }); }); };

/* 8) 翻转卡片 */
const initFlipCards = () => { document.querySelectorAll('.flip-btn-front').forEach(flipBtn => { flipBtn.addEventListener('click', () => { flipBtn.closest('.card').style.transform = 'rotateY(180deg)'; }); }); document.querySelectorAll('.flip-btn-back').forEach(closeBtn => { closeBtn.addEventListener('click', () => { closeBtn.closest('.card').style.transform = 'rotateY(0deg)'; }); }); };

/* 9) 帧动画：滚动触发 + 平滑渐变 + 播放/暂停按钮 */
const initFrameAnimation = () => { const canvas = document.getElementById('animationCanvas'); const ctx = canvas?.getContext('2d'); if (!canvas || !ctx) return; const images = [ "A young man standing in a natural landscape1.png", "A young man standing in a natural landscape2.png", "A young man standing in a natural landscape3.png" ]; let imageObjects = []; let frameIndex = 0; let isPlaying = true; let alpha = 0; let fadeSpeed = 0.02; let frameInterval = 1000 / 24; let lastFrameTime = 0; let imagesLoaded = 0; const playPauseButton = document.getElementById('playPauseButton'); const animationContainer = document.getElementById('animationContainer'); let lastScrollTop = 0; images.forEach((src, index) => { const img = new Image(); img.src = src; img.onload = () => { imageObjects[index] = img; imagesLoaded++; console.log(`✅ 加载成功: ${src}`); if (imagesLoaded === 1) { requestAnimationFrame(drawFrame); } }; img.onerror = () => console.error(`❌ 图片加载失败: ${src}`); }); function resizeCanvas() { const aspectRatio = 16 / 9; const isDesktop = window.innerWidth >= 1024; if (isDesktop) { canvas.width = window.innerWidth; canvas.height = window.innerHeight * 0.75; } else { canvas.width = window.innerWidth; canvas.height = window.innerHeight * 0.6; } } window.addEventListener('resize', resizeCanvas); resizeCanvas(); function drawFrame(timestamp) { if (!isPlaying || imagesLoaded === 0) return; if (timestamp - lastFrameTime > frameInterval) { ctx.clearRect(0, 0, canvas.width, canvas.height); let nextFrameIndex = (frameIndex + 1) % images.length; if (imageObjects[frameIndex]) { ctx.globalAlpha = 1 - alpha; drawImageCover(ctx, imageObjects[frameIndex]); } if (imageObjects[nextFrameIndex]) { ctx.globalAlpha = alpha; drawImageCover(ctx, imageObjects[nextFrameIndex]); } alpha += fadeSpeed; if (alpha >= 1) { alpha = 0; frameIndex = nextFrameIndex; } lastFrameTime = timestamp; } requestAnimationFrame(drawFrame); } function drawImageCover(ctx, img) { const canvasRatio = canvas.width / canvas.height; const imgRatio = img.width / img.height; let drawWidth, drawHeight, offsetX, offsetY; if (imgRatio > canvasRatio) { drawHeight = canvas.height * 0.9; drawWidth = img.width * (drawHeight / img.height); offsetX = (canvas.width - drawWidth) / 2; offsetY = (canvas.height - drawHeight) / 2; } else { drawWidth = canvas.width; drawHeight = img.height * (drawWidth / img.width); offsetX = 0; offsetY = (canvas.height - drawHeight) / 2; } ctx.drawImage(img, offsetX, offsetY, drawWidth, drawHeight); } playPauseButton?.addEventListener('click', () => { isPlaying = !isPlaying; playPauseButton.textContent = isPlaying ? "❚❚" : "▶"; if (isPlaying) requestAnimationFrame(drawFrame); }); window.addEventListener('DOMContentLoaded', () => { requestAnimationFrame(drawFrame); }); };

/*10为触发active的demo1容器*/
function initdemo1CarouselTrack() { const container = document.querySelector(".demo1-carousel-container"); const track = document.querySelector(".demo1-carousel-track"); const slides = Array.from(document.querySelectorAll(".demo1-carousel-slide")); const prevBtn = document.querySelector(".demo1-carousel-prev"); const nextBtn = document.querySelector(".demo1-carousel-next"); const dots = Array.from(document.querySelectorAll(".demo1-carousel-dot")); if (!container || !track || slides.length === 0 || !dots.length) { console.warn("Carousel elements not found!"); return; } const totalReal = 6; const uniqueSlides = slides.slice(0, totalReal); uniqueSlides.forEach((slide, i) => { slide.setAttribute("data-index", i); }); const firstSlide = uniqueSlides[0]; const lastSlide  = uniqueSlides[totalReal - 1]; const firstClone = firstSlide.cloneNode(true); const lastClone  = lastSlide.cloneNode(true); firstClone.setAttribute("data-index", 0); lastClone.setAttribute("data-index", totalReal - 1); track.insertBefore(lastClone, track.firstChild); track.appendChild(firstClone); const allSlides = Array.from(track.querySelectorAll(".demo1-carousel-slide")); const totalSlidesWithClones = allSlides.length; let currentIndex = 1; let isAnimating  = false; function getSlideWidth() { if (window.innerWidth <= 768) { return Math.floor(window.innerWidth * 0.8) + 15; } else { const slideElem = container.querySelector(".demo1-carousel-slide"); let measuredWidth = slideElem ? slideElem.getBoundingClientRect().width : 0; if (measuredWidth === 0) { measuredWidth = container.clientWidth || window.innerWidth; } const gap = 15; return measuredWidth + gap; } } function updateCarousel() { const slideWidth = getSlideWidth(); const offset = -currentIndex * slideWidth; track.style.transform = `translateX(${offset}px)`; let dotIndex; if (currentIndex === 0) { dotIndex = totalReal - 1; } else if (currentIndex === totalSlidesWithClones - 1) { dotIndex = 0; } else { dotIndex = currentIndex - 1; } dots.forEach((dot, i) => { dot.classList.toggle("active", i === dotIndex); }); allSlides.forEach(sl => { sl.classList.remove("active","prev","next","shadow"); const aTag = sl.querySelector("a"); if (aTag) aTag.style.pointerEvents = "none"; }); allSlides[currentIndex].classList.add("active"); const centerA = allSlides[currentIndex].querySelector("a"); if (centerA) centerA.style.pointerEvents = "auto"; const nextIndex = (currentIndex + 1) % totalSlidesWithClones; const prevIndex = (currentIndex - 1 + totalSlidesWithClones) % totalSlidesWithClones; allSlides[nextIndex].classList.add("next"); allSlides[prevIndex].classList.add("prev"); allSlides.forEach(sl => { if (!sl.classList.contains("active")) { sl.classList.add("shadow"); } }); } function nextSlide() { if (isAnimating) return; isAnimating = true; currentIndex++; track.style.transition = "transform 0.5s ease-in-out"; updateCarousel(); } function prevSlide() { if (isAnimating) return; isAnimating = true; currentIndex--; track.style.transition = "transform 0.5s ease-in-out"; updateCarousel(); } function jumpToSlide(index) { if (isAnimating) return; isAnimating = true; currentIndex = index + 1; track.style.transition = "transform 0.5s ease-in-out"; updateCarousel(); } prevBtn?.addEventListener("click", () => { prevSlide(); resetInterval(); }); nextBtn?.addEventListener("click", () => { nextSlide(); resetInterval(); }); dots.forEach((dot, i) => { dot.addEventListener("click", () => { jumpToSlide(i); resetInterval(); }); }); let interval = setInterval(nextSlide, 5000); function resetInterval() { clearInterval(interval); interval = setInterval(nextSlide, 5000); } track.addEventListener("transitionend", () => { if (currentIndex === totalSlidesWithClones - 1) { track.style.transition = "none"; currentIndex = 1; updateCarousel(); void track.offsetWidth; track.style.transition = "transform 0.5s ease-in-out"; } if (currentIndex === 0) { track.style.transition = "none"; currentIndex = totalReal; updateCarousel(); void track.offsetWidth; track.style.transition = "transform 0.5s ease-in-out"; } isAnimating = false; }); track.style.transition = "none"; updateCarousel(); setTimeout(() => { track.style.transition = "transform 0.5s ease-in-out"; }, 50); allSlides.forEach(slide => { slide.addEventListener("click", (e) => { if (slide.classList.contains("active")) { } else if (slide.classList.contains("next")) { e.preventDefault(); nextSlide(); resetInterval(); } else if (slide.classList.contains("prev")) { e.preventDefault(); prevSlide(); resetInterval(); } }); }); const exploreBtns = document.querySelectorAll('.demo1-explore-btn'); exploreBtns.forEach(btn => { btn.addEventListener('click', (e) => { const link = e.target.closest('.demo1-carousel-slide')?.querySelector('a'); if (link) { window.location.href = link.href; } }); }); window.addEventListener("resize", () => { isAnimating = false; track.style.transition = "none"; updateCarousel(); setTimeout(() => { track.style.transition = "transform 0.5s ease-in-out"; }, 50); }); let startX = 0; let isSwiping = false; container.addEventListener('touchstart', (e) => { if (isAnimating) return; isSwiping = true; startX = e.touches[0].clientX; }); container.addEventListener('touchmove', (e) => { }); container.addEventListener('touchend', (e) => { if (!isSwiping) return; let endX = e.changedTouches[0].clientX; let distance = endX - startX; isSwiping = false; if (Math.abs(distance) > 50) { if (distance < 0) { nextSlide(); } else { prevSlide(); } resetInterval(); } }); }

/* 11) 轮播轨道功能：左右按钮和小点控制 */
// 桌面端轮播初始化函数
const initSpec1CarouselTrack = () => { const track = document.querySelector(".spec1-carousel-track"); const slides = document.querySelectorAll(".spec1-carousel-slide"); const prevBtn = document.querySelector(".spec1-carousel-prev"); const nextBtn = document.querySelector(".spec1-carousel-next"); const dots = document.querySelectorAll(".spec1-carousel-dot"); if (!track || slides.length === 0 || !dots.length) return; let currentIndex = 1; const totalSlides = slides.length; const slideWidth = slides[0].offsetWidth + 15; const firstSlide = slides[0]; const lastSlide = slides[slides.length - 1]; const firstClone = firstSlide.cloneNode(true); const lastClone = lastSlide.cloneNode(true); track.appendChild(firstClone); track.insertBefore(lastClone, track.firstChild); const totalSlidesWithClones = totalSlides + 2; function updateCarousel() { const offset = -currentIndex * slideWidth; track.style.transform = `translateX(${offset}px)`; slides.forEach((slide, index) => { slide.classList.toggle("active", index === currentIndex); }); dots.forEach((dot, i) => dot.classList.toggle("active", i === currentIndex)); } function nextSlide() { currentIndex++; if (currentIndex >= totalSlidesWithClones) { currentIndex = 1; track.style.transition = "none"; updateCarousel(); setTimeout(() => { track.style.transition = "transform 0.5s ease-in-out"; }, 50); } else { updateCarousel(); } } function prevSlide() { currentIndex--; if (currentIndex < 0) { currentIndex = totalSlidesWithClones - 2; track.style.transition = "none"; updateCarousel(); setTimeout(() => { track.style.transition = "transform 0.5s ease-in-out"; }, 50); } else { updateCarousel(); } } function jumpToSlide(index) { currentIndex = index; updateCarousel(); } prevBtn?.addEventListener("click", () => { prevSlide(); resetInterval(); }); nextBtn?.addEventListener("click", () => { nextSlide(); resetInterval(); }); dots.forEach((dot, index) => { dot.addEventListener("click", () => { jumpToSlide(index); resetInterval(); }); }); let interval = setInterval(nextSlide, 5000); function resetInterval() { clearInterval(interval); interval = setInterval(nextSlide, 5000); } setTimeout(() => { track.style.transition = "none"; currentIndex = 1; updateCarousel(); setTimeout(() => { track.style.transition = "transform 0.5s ease-in-out"; }, 50); }, 50); if (window.innerWidth <= 768) { setTimeout(() => { track.style.transition = "transform 0.3s ease-in-out"; }, 500); } updateCarousel(); const exploreBtns = document.querySelectorAll('.spec1-explore-btn'); exploreBtns.forEach(btn => { btn.addEventListener('click', (e) => { const link = e.target.closest('.spec1-carousel-slide').querySelector('a'); if (link) { window.location.href = link.href; } }); }); };

/* 12 */
document.addEventListener("DOMContentLoaded", function () { const track = document.querySelector(".touch1-carousel-track"); const slides = Array.from(document.querySelectorAll(".touch1-carousel-slide")); const prevBtn = document.querySelector(".touch1-prev-btn"); const nextBtn = document.querySelector(".touch1-next-btn"); let currentIndex = 0; const slideWidthWithGap = 615 + 15; function updateCarousel() { track.style.transform = `translateX(-${currentIndex * slideWidthWithGap}px)`; if (currentIndex === 0) { prevBtn.disabled = true; } else { prevBtn.disabled = false; } if (currentIndex === slides.length - 1) { nextBtn.disabled = true; } else { nextBtn.disabled = false; } } prevBtn.addEventListener("click", function () { if (currentIndex > 0) { currentIndex--; updateCarousel(); } }); nextBtn.addEventListener("click", function () { if (currentIndex < slides.length - 1) { currentIndex++; updateCarousel(); } }); updateCarousel(); });

/* ========== 初始化所有功能 ========== */
document.addEventListener('DOMContentLoaded', () => { initHeroCarousel(); initEmailJS(); initCompareFeature(); initHamburgerMenu(); initModalWindows(); initInfiniteScroller(); initProductImageClick(); initFlipCards(); initFrameAnimation(); initDemo1CarouselTrack(); initSpec1CarouselTrack(); initTouch1CarouselTrack(); });
document.addEventListener("DOMContentLoaded", function () { const track = document.querySelector(".touch1-carousel-track"); const slides = Array.from(track.children); const prevBtn = document.querySelector(".touch1-prev-btn"); const nextBtn = document.querySelector(".touch1-next-btn"); let currentIndex = 0; const totalSlides = slides.length; const slideWidth = 615 + 15; function updateCarousel() { track.style.transform = `translateX(-${currentIndex * slideWidth}px)`; prevBtn.disabled = (currentIndex === 0); nextBtn.disabled = (currentIndex === totalSlides - 1); } prevBtn.addEventListener("click", () => { if (currentIndex > 0) { currentIndex--; updateCarousel(); } }); nextBtn.addEventListener("click", () => { if (currentIndex < totalSlides - 1) { currentIndex++; updateCarousel(); } }); updateCarousel(); });
