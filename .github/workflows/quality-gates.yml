name: Quality Gates

on:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  smoke-and-lighthouse:
    runs-on: ubuntu-latest
    env:
      SITE_URL: ${{ secrets.SITE_URL }}
      TTS_API_URL: ${{ vars.TTS_API_URL }}

    steps:
      - uses: actions/checkout@v4

      - name: Smoke check - page is reachable
        run: |
          set -Eeuo pipefail
          echo "Checking $SITE_URL ..."
          curl -fsSL -o /dev/null -w "%{http_code}\n" "$SITE_URL" | tee /tmp/code
          test "$(cat /tmp/code)" = "200"

      - name: Smoke check - API reachable (optional)
        if: env.TTS_API_URL != ''
        run: |
          set -Eeuo pipefail
          echo "Checking $TTS_API_URL ..."
          code=$(curl -fsSL -o /dev/null -w "%{http_code}\n" "$TTS_API_URL" || true)
          # 200/404/405 视为可接受，其他失败
          if [ "$code" != "200" ] && [ "$code" != "404" ] && [ "$code" != "405" ]; then
            echo "Unexpected status: $code"; exit 1
          fi

      # ✅ 关键：把 JSON 写入文件，而不是塞进 configPath
      - name: Prepare Lighthouse config
        run: |
          cat > lighthouserc.json <<'JSON'
          {
            "ci": {
              "collect": { "numberOfRuns": 1 },
              "assert": {
                "assertions": {
                  "categories:performance":   ["warn", { "minScore": 0.80 }],
                  "categories:accessibility": ["warn", { "minScore": 0.90 }],
                  "categories:best-practices":["warn", { "minScore": 0.90 }],
                  "categories:seo":           ["warn", { "minScore": 0.80 }]
                }
              }
            }
          }
          JSON
          test -s lighthouserc.json && jq . lighthouserc.json || cat lighthouserc.json

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: ${{ env.SITE_URL }}
          configPath: lighthouserc.json     # ← 这里必须是“文件路径”
          uploadArtifacts: true
          temporaryPublicStorage: true
          artifactName: lighthouse-results









