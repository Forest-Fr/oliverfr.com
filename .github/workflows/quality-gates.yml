name: Quality Gates

on:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  smoke-and-lighthouse:
    runs-on: ubuntu-latest
    env:
      SITE_URL: ${{ secrets.SITE_URL }}
      TTS_API_URL: ${{ vars.TTS_API_URL }}
    steps:
      - uses: actions/checkout@v4

      - name: Smoke check - page is reachable
        run: |
          set -Eeuo pipefail
          : "${SITE_URL:?SITE_URL is empty}"
          code=$(curl -ILs -o /dev/null -w "%{http_code}\n" "$SITE_URL")
          echo "HTTP $code"
          if [ "$code" -ge 200 ] && [ "$code" -lt 400 ]; then exit 0; else exit 1; fi

      - name: Smoke check - API reachable (optional)
        if: env.TTS_API_URL != ''
        run: |
          set -Eeuo pipefail
          code=$(curl -fsSL -o /dev/null -w "%{http_code}\n" "$TTS_API_URL" || true)
          echo "HTTP $code"
          case "$code" in 200|401|403|404|405) exit 0 ;; *) exit 1 ;; esac

      # 生成临时配置文件（避免找不到 .lighthouserc.json）
      - name: Write LHCI config
        run: |
          cat > lhrc.json <<'JSON'
          {
            "ci": {
              "collect": { "numberOfRuns": 1 },
              "assert": {
                "assertions": {
                  "categories:performance": ["warn", {"minScore": 0.80}],
                  "categories:accessibility": ["warn", {"minScore": 0.90}],
                  "categories:best-practices": ["warn", {"minScore": 0.90}],
                  "categories:seo": ["warn", {"minScore": 0.80}]
                }
              }
            }
          }
          JSON
          test -f lhrc.json && echo "lhrc.json ready"

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: ${{ env.SITE_URL }}
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: lhrc.json
